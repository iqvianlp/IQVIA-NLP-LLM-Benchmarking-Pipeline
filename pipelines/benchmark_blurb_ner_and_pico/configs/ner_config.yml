# Configuration for prompt template generation with prompt_gen.py.
#
# prompt_gen.py generates one prompt template for each task under `task` and each template under `templates`.
#
# A template signifies the semantic content (or "sections") of a prompt, and a template object contains:
#
#   - name (str): an arbitrary name for the template for reference
#   - sections (list): the order and type of sections in the prompt, each containing:
#       - name (str): the name of the section; must match a property of the task, except for the "example" and "cue"
#           sections, which are populated by the example selection algorithm with the template defined in the
#           task (see below), and actual experiment data at runtime
#       - [optional] header (str): the text to be added as header to this section
#
# A task is a BLURB task and contains the following properties:
#
#   - dataset (str): the name of the BLURB dataset for this task
#   - example (str): the structure of examples and cue; the actual examples will be populated by the example selection
#       algorithm, so this is just the structure. Note that you can add as many "example" sections as you wish in the
#       template, all will use the template defined here
#   - section names (str): the text to go into each section of each template of the same name

templates:
  - name: short, zero-shot
    sections:
      - name: instructions
      - name: cue
  - name: short, few-shot (3)
    sections:
      - name: instructions
      - name: example
      - name: example
      - name: example
      - name: cue
  - name: long, zero-shot
    sections:
      - name: input-spec
        header: "***INPUT***"
      - name: output-spec
        header: "***OUTPUT***"
      - name: documentation
        header: "***DOCUMENTATION***"
      - name: cue
        header: "***YOUR TURN***"
  - name: long, few-shot (3)
    sections:
      - name: input-spec
        header: "***INPUT***"
      - name: output-spec
        header: "***OUTPUT***"
      - name: documentation
        header: "***DOCUMENTATION***"
      - name: example
        header: "***EXAMPLES***"
      - name: example
      - name: example
      - name: cue
        header: "***YOUR TURN***"
tasks:
  - dataset: BC2GM
    example: |
      Input: {}
      Output: {}
    sections:
      instructions: I am an excellent linguist and an expert in the biomedical domain. The task is to output a comma-delimited list of gene entities found in the given sentence.
      input-spec: The input is a sentence.
      output-spec: The task is to identify all gene mentions in the input sentence and return them in comma-separated list.
      documentation: |
        gene: a basic unit of heredity and a sequence of nucleotides in DNA.
  - dataset: BC5-chem
    example: |
      Input: {}
      Output: {}
    sections:
      instructions: I am an excellent linguist and an expert in the biomedical domain. The task is to output a comma-delimited list of chemical entities found in the given sentence.
      input-spec: The input is a sentence.
      output-spec: The task is to identify all chemical mentions in the input sentence and return them in comma-separated list.
      documentation: |
        chemical: a compound or substance that has been purified or prepared.
  - dataset: BC5-disease
    example: |
      Input: {}
      Output: {}
    sections:
      instructions: I am an excellent linguist and an expert in the biomedical domain. The task is to output a comma-delimited list of disease entities found in the given sentence.
      input-spec: The input is a sentence.
      output-spec: The task is to identify all disease mentions in the input sentence and return them in comma-separated list.
      documentation: |
        disease: a disorder of structure or function in a human, animal, or plant, especially one that has a known cause and a distinctive group of symptoms, signs, or anatomical changes.
  - dataset: JNLPBA
    example: |
      Input: {}
      Output: {}
    sections:
      instructions: I am an excellent linguist and an expert in the biomedical domain. The task is to output a comma-delimited list of all protein entities, all gene entities, and all cell entities found in the given sentence.
      input-spec: The input is a sentence.
      output-spec: The task is to identify all protein mentions, gene mentions, and cell mentions in the input sentence and return them in comma-separated list.
      documentation: |
        cell: includes cell line (a cell culture developed from a single cell and therefore consisting of cells with a uniform genetic makeup) and cell type (a classification used to identify cells that share morphological or phenotypical features)
        gene: a basic unit of heredity and a sequence of nucleotides in DNA.
        protein: a large, complex molecule that play many critical roles in a living organism.
  - dataset: NCBI-disease
    example: |
      Input: {}
      Output: {}
    sections:
      instructions: I am an excellent linguist and an expert in the biomedical domain. The task is to output a comma-delimited list of disease entities found in the given sentence.
      input-spec: The input is a sentence.
      output-spec: The task is to identify all disease mentions in the input sentence and return them in comma-separated list.
      documentation: |
        disease: a disorder of structure or function in a human, animal, or plant, especially one that has a known cause and a distinctive group of symptoms, signs, or anatomical changes.
